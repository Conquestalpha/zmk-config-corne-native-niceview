/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&nice_view_spi { cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>; };

/ {
    behaviors {
        gqt: gqt {
            compatible = "zmk,behavior-hold-tap";
            label = "GQT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <120>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&trans        &gqt TILDE Q  &kp W  &kp E         &kp R           &kp T                   &kp Y                 &kp U                    &kp I                    &kp O                      &gqt SQT P            &trans
&gqt TILDE Q  &kp A         &kp S  &gqt TAB D    &mt LEFT_GUI F  &kp G                   &mt RIGHT_ALT H       &kp J                    &kp K                    &kp L                      &gqt MINUS SEMICOLON  &gqt SQT P
&trans        &kp Z         &kp X  &gqt LG(C) C  &gqt LG(V) V    &gqt LG(B) B            &gqt LG(N) N          &kp M                    &gqt LEFT_BRACKET COMMA  &gqt RIGHT_BRACKET PERIOD  &gqt BACKSLASH SLASH  &trans
                                   &mo 1         &kp LSHFT       &gqt LS(ENTER) ENTER    &gqt LG(SPACE) SPACE  &gqt LG(BSPC) BACKSPACE  &to 1
            >;
        };

        nav {
            bindings = <
&trans       &kp PG_UP  &trans          &gqt LG(LEFT) LS(LC(TAB))  &gqt LG(RIGHT) LC(TAB)  &kp LG(Z)             &none                 &kp LA(LEFT)  &kp UP             &kp LA(RIGHT)  &none              &trans
&kp PAGE_UP  &kp PG_DN  &kp LEFT_SHIFT  &sk LEFT_ALT               &sk LEFT_GUI            &sk LCTRL             &kp LS(LG(LEFT))      &kp LEFT      &kp DOWN           &kp RIGHT      &kp LS(LG(RIGHT))  &trans
&none        &none      &kp LG(X)       &kp LG(C)                  &kp LG(V)               &kp LG(LS(Z))         &trans                &trans        &trans             &trans         &kp LC(LA(LGUI))   &none
                                        &to 0                      &kp LSHFT               &gqt LS(RET) ENTER    &gqt LG(SPACE) SPACE  &kp BSPC      &kp LA(LC(LG(Q)))
            >;
        };

        num {
            bindings = <
&trans  &trans            &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &trans                  &trans                &kp N7    &kp N8  &kp N9  &none          &trans
&trans  &kp LS(LG(LEFT))  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LS(LG(RIGHT))       &kp PLUS              &kp N4    &kp N5  &kp N6  &gqt MINUS N0  &none
&none   &trans            &trans        &trans    &trans         &trans                  &kp LS(STAR)          &kp N1    &kp N2  &kp N3  &kp FSLH       &trans
                                        &to 0     &kp LSHFT      &gqt LS(ENTER) ENTER    &gqt LG(SPACE) SPACE  &kp BSPC  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        bt_setting {
            bindings = <
&none   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &bt BT_SEL 0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &kp LG(SPACE)  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR    &trans        &trans        &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &to 0         &trans         &trans          &trans  &trans  &trans
            >;
        };
    };
};
