/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&nice_view_spi { cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>; };

/ {
    behaviors {
        gqt: gqt {
            compatible = "zmk,behavior-hold-tap";
            label = "GQT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <120>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_bt_setting {
            timeout-ms = <50>;
            bindings = <&to 4>;
            key-positions = <29 38 37>;
        };

        combo_to_number {
            timeout-ms = <50>;
            bindings = <&to 2>;
            key-positions = <19 20 21 40>;
        };

        combo_to_mouse {
            timeout-ms = <50>;
            bindings = <&to 3>;
            key-positions = <14 15 16 37>;
        };

        combo_to_home {
            timeout-ms = <50>;
            bindings = <&to 0>;
            key-positions = <37 38>;
        };

        combo_esc {
            timeout-ms = <25>;
            bindings = <&kp ESCAPE>;
            key-positions = <13 2>;
        };

        combo_playpause {
            timeout-ms = <25>;
            bindings = <&kp C_PP>;
            key-positions = <5 6>;
        };

        combo_left_parenthesis {
            timeout-ms = <25>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        combo_right_parenthesis {
            timeout-ms = <25>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
        };

        combo_vol_up {
            timeout-ms = <25>;
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <27 28>;
        };

        combo_vol_down {
            timeout-ms = <25>;
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <26 25>;
        };

        combo_mute {
            timeout-ms = <25>;
            bindings = <&kp C_MUTE>;
            key-positions = <26 27>;
        };

        combo_plus {
            timeout-ms = <25>;
            bindings = <&kp PLUS>;
            key-positions = <34 22>;
        };

        combo_minus {
            timeout-ms = <25>;
            bindings = <&kp MINUS>;
            key-positions = <22 21>;
        };

        combo_multiply {
            timeout-ms = <25>;
            bindings = <&kp ASTERISK>;
            key-positions = <33 22>;
        };

        combo_divide {
            timeout-ms = <25>;
            bindings = <&kp SLASH>;
            key-positions = <34 21>;
        };

        combo_equal {
            timeout-ms = <25>;
            bindings = <&kp EQUAL>;
            key-positions = <34 33>;
        };

        combo_no1 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_1>;
            key-positions = <40 31>;
        };

        combo_no2 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_2>;
            key-positions = <40 32>;
        };

        combo_no3 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_3>;
            key-positions = <40 33>;
        };

        combo_no4 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_4>;
            key-positions = <40 19>;
        };

        combo_no5 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_5>;
            key-positions = <40 20>;
        };

        combo_no6 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_6>;
            key-positions = <21 40>;
        };

        combo_no7 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_7>;
            key-positions = <40 7>;
        };

        combo_no8 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_8>;
            key-positions = <8 40>;
        };

        combo_no9 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_9>;
            key-positions = <9 40>;
        };

        combo_no0 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_0>;
            key-positions = <40 22>;
        };

        combo_spaces_left {
            timeout-ms = <35>;
            bindings = <&kp F7>;
            key-positions = <2 14>;
        };

        combo_spaces_right {
            timeout-ms = <35>;
            bindings = <&kp F9>;
            key-positions = <5 17>;
        };

        combo_track_prev {
            timeout-ms = <35>;
            bindings = <&kp C_PREV>;
            key-positions = <25 26 27>;
        };

        combo_track_next {
            timeout-ms = <35>;
            bindings = <&kp C_NEXT>;
            key-positions = <28 27 26>;
        };

        combo_change_language {
            timeout-ms = <35>;
            bindings = <&kp LC(SPACE)>;
            key-positions = <16 17 18 19>;
        };

        combo_spaces {
            timeout-ms = <35>;
            bindings = <&kp F8>;
            key-positions = <2 4>;
        };

        combo_homerow_scroll {
            timeout-ms = <35>;
            bindings = <&kp LA(LC(LG(W)))>;
            key-positions = <22 9>;
        };

        combo_homerow_search {
            timeout-ms = <35>;
            bindings = <&kp LA(LC(LG(Q)))>;
            key-positions = <36 41>;
        };

        combo_moom_toggle {
            timeout-ms = <35>;
            bindings = <&kp LA(LG(LC(E)))>;
            key-positions = <2 3>;
        };

        combo_skmr {
            timeout-ms = <50>;
            bindings = <&macro_skmr>;
            key-positions = <37 28 40 31>;
        };

        combo_singapura_esc {
            bindings = <&kp LG(ESCAPE)>;
            key-positions = <1 2>;
        };

        combo_homerow_search2 {
            bindings = <&kp LA(LC(LG(Q)))>;
            key-positions = <19 21>;
        };

        combo_homerow_searchword {
            bindings = <&kp LG(LA(LC(T)))>;
            key-positions = <18 20>;
        };
    };

    macros {
        macro_skmr: macro_skmr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(I) &kp SPACE &kp F &kp E &kp E &kp L &kp SPACE &kp L &kp I &kp K &kp E &kp SPACE &kp W &kp E &kp SPACE &kp H &kp A &kp V &kp E &kp SPACE &kp G &kp O &kp N &kp E &kp SPACE &kp P &kp A &kp S &kp T &kp SPACE &kp S &kp O &kp C &kp I &kp A &kp L &kp SPACE &kp N &kp O &kp R &kp M &kp S &kp SPACE &kp H &kp A &kp H &kp H &kp A &kp A &kp H &kp A &kp H &kp H &kp H>;
            label = "MACRO_SKMR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&trans        &gqt TILDE Q  &kp W  &kp E         &kp R            &kp T                   &kp Y                 &kp U                    &kp I                    &kp O                      &gqt SQT P            &trans
&gqt TILDE Q  &kp A         &kp S  &gqt TAB D    &gqt LEFT_GUI F  &kp G                   &gqt RIGHT_ALT H      &kp J                    &kp K                    &kp L                      &gqt MINUS SEMICOLON  &gqt SQT P
&trans        &kp Z         &kp X  &gqt LG(C) C  &gqt LG(V) V     &gqt LG(B) B            &gqt LG(N) N          &kp M                    &gqt LEFT_BRACKET COMMA  &gqt RIGHT_BRACKET PERIOD  &gqt BACKSLASH SLASH  &trans
                                   &mo 1         &kp LSHFT        &gqt LS(ENTER) ENTER    &gqt LG(SPACE) SPACE  &gqt LG(BSPC) BACKSPACE  &to 1
            >;
        };

        nav {
            bindings = <
&trans       &kp PAGE_UP  &trans          &gqt LG(LEFT) LS(LC(TAB))  &gqt LG(RIGHT) LC(TAB)  &kp LG(Z)             &none                 &kp LA(LEFT)  &kp UP             &kp LA(RIGHT)  &none              &trans
&kp PAGE_UP  &kp PG_DN    &kp LEFT_SHIFT  &sk LEFT_ALT               &sk LEFT_GUI            &sk LCTRL             &kp LS(LG(LEFT))      &kp LEFT      &kp DOWN           &kp RIGHT      &kp LS(LG(RIGHT))  &trans
&none        &none        &kp LG(X)       &kp LG(C)                  &kp LG(V)               &kp LG(LS(Z))         &trans                &trans        &trans             &trans         &kp LC(LA(LGUI))   &none
                                          &to 0                      &kp LSHFT               &gqt LS(RET) ENTER    &gqt LG(SPACE) SPACE  &kp BSPC      &kp LA(LC(LG(Q)))
            >;
        };

        num {
            bindings = <
&trans  &trans            &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &trans                  &trans                &kp N7    &kp N8  &kp N9  &none          &trans
&trans  &kp LS(LG(LEFT))  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LS(LG(RIGHT))       &kp PLUS              &kp N4    &kp N5  &kp N6  &gqt MINUS N0  &none
&none   &trans            &trans        &trans    &trans         &trans                  &kp LS(STAR)          &kp N1    &kp N2  &kp N3  &kp FSLH       &trans
                                        &to 0     &kp LSHFT      &gqt LS(ENTER) ENTER    &gqt LG(SPACE) SPACE  &kp BSPC  &trans
            >;
        };

        mouse {
            bindings = <
&trans       &kp PAGE_UP    &trans    &gqt LG(LEFT) LC(LS(TAB))  &gqt LG(RIGHT) LC(TAB)  &msc SCRL_UP      &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &kp PAGE_UP    &trans
&kp PAGE_UP  &kp PAGE_DOWN  &mkp MB3  &mkp RCLK                  &mkp LCLK               &msc SCRL_DOWN    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp PAGE_DOWN  &kp PAGE_UP
&trans       &trans         &trans    &kp LG(C)                  &kp LG(V)               &trans            &trans          &trans          &trans          &trans           &trans         &trans
                                      &to 0                      &trans                  &trans            &mkp LCLK       &mkp RCLK       &trans
            >;
        };

        bt_setting {
            bindings = <
&none   &none       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans        &trans        &kp LG(SPACE)  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR  &trans        &trans        &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                  &to 0         &trans         &trans          &trans  &trans  &trans
            >;
        };
    };
};
